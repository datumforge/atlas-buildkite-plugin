#!/bin/bash

set -o nounset # script exits when tries to use undeclared variables == set -u
set -o pipefail # causes pipelines to retain / set the last non-zero status

default_branch=${BUILDKITE_PLUGIN_ATLAS_DEFAULT_BRANCH:-${BUILDKITE_PIPELINE_DEFAULT_BRANCH}}
dev_url=${BUILDKITE_PLUGIN_ATLAS_DEV_URL}
project=${BUILDKITE_PLUGIN_ATLAS_PROJECT}
dir=${BUILDKITE_PLUGIN_ATLAS_DIR}
step=${BUILDKITE_PLUGIN_ATLAS_STEP:-lint}
debug=${BUILDKITE_PLUGIN_ATLAS_DEBUG:-false}

if [[ "$debug" == "true" ]]; then   
    set -o xtrace # trace what's executed == set -x (useful for debugging)
fi

function main() {
    local error_results=
    local warning_results=
    local url=

    # Lint and Validate
    if [ "${step}" = "lint" ] || [ "${step}" = "all" ]; then
        echo +++ :database: lint and validate
        
        # Run the lint command with the web client, and output to json
        lint_result=$(atlas migrate lint --dev-url "${dev_url}" --dir "${dir}" -w --format "{{ json .  }}")
        result=$?

        # Parse the results to display on the top of the buildkite job
        lint_result="$lint_result" parse_lint_result

        # Start the annotation
        echo -e "\`atlas migrate lint\` results: " | buildkite-agent annotate --context atlas

        # Check for error results, warning results, otherwise it was successful
        if [[ $error_results != "" ]]; then
            echo -e  ":scream_cat: errors found\n" | buildkite-agent annotate --context "atlas" --style "error" --append
            echo -e "\`\`\`term\n $(echo "$error_results" | jq) \n\`\`\`" | buildkite-agent annotate --context "atlas" --append 
            if [[ "$warning_results" != "" ]]; then
                echo -e "\`\`\`term\n $(echo "$warning_results" | jq) \n\`\`\`" | buildkite-agent annotate --context "atlas"  --append
            fi
        elif [[ "$warning_results" != "" ]]; then
            echo -e  ":smirk_cat: warnings found\n" | buildkite-agent annotate --context "atlas" --style "warning" --append
            echo -e "\`\`\`term\n $(echo "$warning_results" | jq) \n\`\`\`" | buildkite-agent annotate --context "atlas" --append
        else 
            echo -e  ":heart_eyes_cat: no errors found, congrats!\n"| buildkite-agent annotate --context "atlas" --style "success"  --append
        fi

        echo -e  "See the full report [here]($url)\n" | buildkite-agent annotate --context "atlas" --append

        # Exit early if this failed
        if [[ $result -ne 0 ]]; then 
            exit "$result"
        fi

        # Run validate and exit early, if failed
        atlas migrate validate --dev-url "${dev_url}" --dir "${dir}"
        result=$?
        if [[ $result -ne 0 ]]; then 
            exit "$result"
        fi
    fi

    # Push the migration if the step was enabled
    if [ "${step}" = "migrate" ] || [ "${step}" = "all" ]; then
        echo +++ :rocket: push migrations
        # only push on the default branch
        if [ "${BUILDKITE_BRANCH}" = "${default_branch}" ]; then
            atlas migrate push "${project}" --dev-url "${dev_url}" --dir "${dir}"
            result=$?
        else 
            echo not pushing migration, not running against "${default_branch}" branch
            result=0
        fi
    fi

    exit "$result"
}


function parse_lint_result () {  
    url=$(echo "$lint_result" | jq -r '.URL')

    num_files=$(echo "$lint_result"| jq '.Files | length')

    # There are no files present on a successful run, abort now
    if [[ $num_files == 0 ]]; then
        return 
    fi

    error_results=$(echo "$lint_result" | jq '.Files[0] 
    | select(.Reports != null) 
    | .Reports 
    | map(select(.Text == "destructive changes detected"))
    | .[0].Diagnostics')

    warning_results=$(echo "$lint_result" | jq '.Files[0] 
    | select(.Reports != null) 
    | .Reports 
    | map(select(.Text == "data dependent changes detected"))
    | .[0].Diagnostics')

    # Display these in the logs 
    echo "$warning_results" |jq
    echo "$error_results" |jq
}

main